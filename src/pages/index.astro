---
import { Font } from "astro:assets";
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Waste Atlas</title>
        <Font cssVariable="--font-switzer" preload />
        <Font cssVariable="--font-erode" preload />
        <link rel="stylesheet" href="/reset.css" />
        <style>
            .icon {
                vertical-align: -0.2em;
                width: 1em;
                height: 1em;
                display: inline-block;
            }

            .bi {
                display: inline-block;
                vertical-align: -0.125em;
                fill: currentcolor;
            }

            body {
                margin: 0;
                padding: 0;
                background: black;
                font-family:
                    var(--font-switzer),
                    system-ui,
                    -apple-system,
                    BlinkMacSystemFont,
                    "Segoe UI",
                    Roboto,
                    Oxygen,
                    Ubuntu,
                    Cantarell,
                    "Open Sans",
                    "Helvetica Neue",
                    sans-serif;
            }

            .title-area {
                top: 10px;
                left: 10px;
                padding: 10px 20px;
                max-width: 580px;
                border-radius: 30px;
                transition: display 1s;
            }

            .title-area h1 {
                text-transform: uppercase;
                font-size: 32px;
                font-weight: 500;
            }

            .title-area button {
                position: absolute;
                right: -10px;
                bottom: -10px;
                border-radius: 100px;
                width: 30px;
                height: 30px;
                text-align: center;
                vertical-align: middle;
                font-size: 32px;
                display: flex;
                align-items: center;
                justify-content: center;
                transform: rotate(180deg) translateY(-2px);
            }

            .title-area.open button {
                transform: rotate(0deg);
            }

            .title-area.open section {
                display: block;
                /* max-height: 105px;
                max-width: 580px;
                overflow: hidden;
                transition:
                    max-width 1s ease-in-out 0s,
                    max-height 1s ease-in-out 1s; */
            }

            .title-area:not(.open) section {
                display: none;
                /* max-height: 0;
                max-width: 0;
                overflow: hidden;
                transition:
                    max-height 1s ease-in-out 0s,
                    max-width 1s ease-in-out 1s; */
            }

            .filter {
                bottom: 45px;
                right: 10px;
                z-index: 5;
                border-radius: 100px;
            }

            .filter small {
                display: block;
                position: absolute;
                top: -25px;
                left: 15px;
                color: white;
                text-transform: uppercase;
                font-size: 13;
            }

            .filter div {
                display: flex;
                flex-direction: row;
                gap: 20px;
                list-style: none;
                padding: 5px 10px;
            }

            .filter button {
                border: none;
                cursor: pointer;
                width: 50px;
                height: 50px;
                background-color: red;
                border-radius: 30px;
            }

            html,
            body,
            #map {
                height: 100%;
            }

            .panel {
                background-color: #d9d9d9;
                border: 1px solid #747474;
                color: black;
                z-index: 1;
                position: absolute;
            }

            .submit {
                bottom: 10px;
                left: 10px;
                border-radius: 50px;
                width: 50px;
                height: 50px;
                display: flex;
                justify-content: center;
                align-items: center;
            }

            button.panel {
                cursor: pointer;
            }

            button.panel:hover {
                opacity: 0.7;
            }
        </style>
    </head>
    <body>
        <header class="title-area panel open">
            <h1>Waste Atlas</h1>
            <button class="panel">
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    class="icon"
                    ><path stroke="none" d="M0 0h24v24H0z" fill="none"
                    ></path><path d="M6 15l6 -6l6 6"></path></svg
                >
            </button>
            <section>
                <p>
                    As designers, wouldn't it be amazing to visualize what
                    unexplored, readily accessible, cheap, local materials there
                    are to work with? Through this open-source database we're
                    trying to highlight the potential of local waste as new
                    material. We want to map the waste and classify it so that
                    it finds a home; so that we start blurring the lines of what
                    waste truly is.
                </p>
            </section>
        </header>


        <button class="panel submit">
            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
              </svg>
        </button>

        <dialog closedby="any">
            <h2>Complete the Map!</h2>
            <p>
                blablabla
                By clicking the next button youÂ´ll be directed to the the forms.            
            </p>
            <a href="docs.google.com/forms/d/e/1FAIpQLSfMDb1cRH8I07CLu9XBmOjz8kIOplMNrOg16Lv1OCvKpK6Ydg/viewform?usp=sharing">enlace a forms</a>
          </dialog>

        <div id="map"></div>
        <div
            id="info-panel"
            style="display:none; position: absolute; bottom: 10px; left: 10px; background: rgba(0,0,0,0.7); color: white; padding: 5px 10px; border-radius: 4px; font-family: sans-serif; z-index: 1;"
        >
            <div id="zoom-level">Zoom: 2</div>
            <div id="center-coords">Center: [-120, 50]</div>
        </div>

        <div class="filter panel">
            <small>Choose the type of residue</small>
            <div>
                <button></button>
                <button></button>
                <button></button>
                <button></button>
                <button></button>
            </div>
        </div>

        <script>
            import maplibre from "maplibre-gl";
            import "maplibre-gl/dist/maplibre-gl.css";

            const map = new maplibre.Map({
                container: "map",
                //style: "https://api.maptiler.com/maps/dataviz/style.json?key=bLo8xe0MLrejy29a8JsL",
                style: "https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json",
                center: [0, 40],
                zoom: 1.3,
                maxZoom: 9,
                hash: true,
                maplibreLogo: false,
            });

            // Update info panel when map moves
            map.on("move", () => {
                // Update zoom level
                const zoomDisplay = document.getElementById("zoom-level");
                zoomDisplay.textContent = `Zoom: ${map.getZoom().toFixed(2)}`;

                // Update center coordinates
                const center = map.getCenter();
                const centerDisplay = document.getElementById("center-coords");
                centerDisplay.textContent = `Center: [${center.lng.toFixed(4)}, ${center.lat.toFixed(4)}]`;
            });

            map.on("load", () => {
                map.addSource("waste", {
                    type: "geojson",
                    data: "map.json",
                });

                // map.loadImage("./recycle.png").then((image) =>
                //     map.addImage("recycle", image.data),
                // );

                map.addLayer({
                    id: "waste",
                    type: "circle",
                    source: "waste",
                    paint: {
                        "circle-radius": [
                            "interpolate",
                            ["linear"],
                            ["zoom"],
                            0,
                            0,
                            20,
                            20,
                        ],
                        "circle-color": "#ffffff",
                        "circle-opacity": 0.7,
                        "circle-stroke-color": "#ffffff",
                        "circle-stroke-width": 2,
                        "circle-stroke-opacity": 1.0,
                    },
                });

                map.on("click", "waste", (e) => {
                    const feature = e.features[0];
                    const props = feature.properties;
                    const coordinates = feature.geometry.coordinates.slice();
                    const description = `<a href="/waste/${props.slug}">${props.name} - ${props.location}</a><br/>
${props.category}<br/>`;

                    // Ensure that if the map is zoomed out such that multiple
                    // copies of the feature are visible, the popup appears
                    // over the copy being pointed to.
                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                        coordinates[0] +=
                            e.lngLat.lng > coordinates[0] ? 360 : -360;
                    }

                    new maplibre.Popup()
                        .setLngLat(coordinates)
                        .setHTML(description)
                        .addTo(map);
                });

                // Change the cursor to a pointer when the mouse is over the places layer.
                map.on("mouseenter", "waste", () => {
                    map.getCanvas().style.cursor = "pointer";
                });

                // Change it back to a pointer when it leaves.
                map.on("mouseleave", "waste", () => {
                    map.getCanvas().style.cursor = "";
                });
            });
        </script>

        <script>
            let $titleareabutton = document.querySelector(".title-area button");
            $titleareabutton?.addEventListener("click", (e) => {
                e.target.closest(".title-area").classList.toggle("open");
            });
        </script>
    </body>
</html>
