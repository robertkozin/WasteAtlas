---
import type { APIContext } from "astro";
import directus from "../lib/directus";
import { acceptUserInvite, readItems } from "@directus/sdk";
import { Font } from "astro:assets";
import {
    randomPoint,
    bbox,
    coordReduce,
    pointsWithinPolygon,
    pointGrid,
    polygonSmooth,
    feature,
    explode,
    sample,
    buffer,
    polygonToLine,
    lineChunk,
    randomPosition,
    point,
} from "@turf/turf";

import HeatmapControls from "../components/HeatmapControls.astro";
import type {
    Geometry,
    Point,
    Polygon,
    GeometryCollection,
    GeoJSON,
} from "geojson";

function isPoint(geometry: Geometry): geometry is Point {
    return geometry.type === "Point";
}

function isGeometryCollection(
    geometry: Geometry,
): geometry is GeometryCollection {
    return geometry.type === "GeometryCollection";
}

function isPolygon(geometry: Geometry): geometry is Polygon {
    return geometry.type === "Polygon";
}

function findPoint(geo: Geometry): Point | undefined {
    if (isPoint(geo)) {
        return geo;
    } else if (isGeometryCollection(geo)) {
        let point = geo.geometries.find(isPoint);
        if (point) return point;
    }
}

function findPolygon(geo: Geometry): Polygon | undefined {
    if (isPolygon(geo)) {
        return geo;
    } else if (isGeometryCollection(geo)) {
        let poly = geo.geometries.find(isPolygon);
        if (poly) return poly;
    }
}

function onlyCoords(geo?: GeoJSON): number[] {
    if (!geo) return [];
    return coordReduce(geo, (acc, curr) => acc.concat(curr), [] as number[]);
}

const waste = await directus
    .request(
        readItems("waste", {
            fields: [
                "id",
                "name",
                "location",
                "point",
                "outline",
                "category",
                "slug",
                "characteristics",
                "image",
            ],
            filter: {},
            sort: ["name", "location"],
        }),
    )
    .then((waste) => {
        return waste.map((waste) => {
            let point = waste.point
                ? onlyCoords(findPoint(waste.point))
                : randomPosition([
                      -56.678467, 20.231275, -25.389404, 40.522151,
                  ]);
            let blob = waste.point ? onlyCoords(findPolygon(waste.point)) : [];

            let cat = waste.category;
            let colour =
                cat === "domestic"
                    ? "#9967CA"
                    : cat === "commercial"
                      ? "#FC4008"
                      : cat === "agricultural"
                        ? "#979C35"
                        : cat === "industrial"
                          ? "A1A1A1"
                          : "pink";

            // let blob: number[] = [];
            // if (waste.outline) {
            //     let smooth = polygonSmooth(waste.outline, { iterations: 3 });

            //     let blobGeo = pointGrid(bbox(waste.outline), 50, {
            //         mask: smooth.features[0],
            //     });

            //     // buffer the polygon

            //     let exp = explode(
            //         lineChunk(polygonToLine(smooth.features[0]), 50),
            //     );

            //     blobGeo.features.push(
            //         ...sample(exp, Math.floor(exp.features.length / 1.2))
            //             .features,
            //     );
            //     blob = coordReduce(
            //         blobGeo,
            //         (acc: number[], curr: number[]) => acc.concat(curr),
            //         [] as number[],
            //     );
            // }

            // let point = waste.point?.coordinates || [-41, 35];

            return { ...waste, blob, point, colour };
        });
    });
---

<html lang="en">
    <head>
        <meta charset="utf-8" />
        <!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>Waste Atlas</title>
        <Font cssVariable="--font-switzer" preload />
        <Font cssVariable="--font-erode" preload />
        <link rel="stylesheet" href="/reset.css" />
        <style is:global>
            .icon {
                vertical-align: -0.2em;
                width: 1em;
                height: 1em;
                display: inline-block;
            }

            .bi {
                display: inline-block;
                vertical-align: -0.125em;
                fill: currentcolor;
            }

            body {
                margin: 0;
                padding: 0;
                background: black;
                font-family:
                    var(--font-switzer),
                    system-ui,
                    -apple-system,
                    BlinkMacSystemFont,
                    "Segoe UI",
                    Roboto,
                    Oxygen,
                    Ubuntu,
                    Cantarell,
                    "Open Sans",
                    "Helvetica Neue",
                    sans-serif;
            }

            .title-area {
                top: 10px;
                left: 10px;
                padding: 10px 20px;
                max-width: 564px;
                border-radius: 30px;
                transition: display 1s;
            }

            .title-area h1 {
                text-transform: uppercase;
                font-size: 32px;
                font-weight: 500;
            }

            .title-area button {
                position: absolute;
                right: -20px;
                bottom: -20px;
                border-radius: 100px;
                width: 30px;
                height: 30px;
                font-size: 32px;
                display: flex;
                outline: none;
                align-items: center;
                justify-content: center;
            }

            .title-area.open section {
                display: block;
                /* max-height: 105px;
                max-width: 580px;
                overflow: hidden;
                transition:
                    max-width 1s ease-in-out 0s,
                    max-height 1s ease-in-out 1s; */
            }

            .title-area:not(.open) section {
                display: none;
                /* max-height: 0;
                max-width: 0;
                overflow: hidden;
                transition:
                    max-height 1s ease-in-out 0s,
                    max-width 1s ease-in-out 1s; */
            }

            .filter {
                bottom: 10px;
                right: 10px;
                z-index: 5;
                border-radius: 100px;
            }

            .filter small {
                display: block;
                position: absolute;
                top: -25px;
                left: 15px;
                color: white;
                text-transform: uppercase;
                font-size: 13;
            }

            .filter div {
                display: flex;
                flex-direction: row;
                gap: 20px;
                list-style: none;
                padding: 5px 10px;
            }

            .filter button {
                border: none;
                cursor: pointer;
                width: 50px;
                height: 50px;
                border-radius: 30px;
                color: white;
                font-weight: bold;
                transition: all 0.2s ease;
                position: relative;
            }

            .filter button.active {
                transform: scale(1.1);
                box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            }

            .filter button.active::after {
                content: "";
                position: absolute;
                top: -5px;
                right: -5px;
                width: 12px;
                height: 12px;
                background-color: white;
                border-radius: 50%;
            }

            /* Dialog styles */
            dialog {
                padding: 1.5rem;
                max-width: 400px;
                border-radius: 15px;
                border: 1px solid #747474;
                background-color: rgba(242, 242, 242, 0.95);
                box-shadow: 0 4px 25px rgba(0, 0, 0, 0.3);
                backdrop-filter: blur(10px);
                color: black;
                z-index: 100;
            }

            dialog::backdrop {
                background-color: rgba(0, 0, 0, 0.5);
                backdrop-filter: blur(2px);
            }

            dialog h2 {
                margin-top: 0;
                font-size: 1.5rem;
                font-weight: 600;
                margin-bottom: 1rem;
            }

            dialog p {
                margin-bottom: 1.5rem;
                line-height: 1.5;
            }

            .dialog-buttons {
                display: flex;
                justify-content: flex-end;
                gap: 1rem;
                margin-top: 1.5rem;
            }

            #close-dialog {
                background-color: transparent;
                border: 1px solid #747474;
                padding: 0.5rem 1rem;
                border-radius: 30px;
                cursor: pointer;
                font-size: 14px;
            }

            #close-dialog:hover {
                background-color: rgba(0, 0, 0, 0.05);
            }

            .form-link {
                display: inline-block;
                background-color: #000;
                color: white;
                text-decoration: none;
                padding: 0.5rem 1.5rem;
                border-radius: 30px;
                font-size: 14px;
                font-weight: 500;
                transition: all 0.2s ease;
            }

            .form-link:hover {
                background-color: #333;
                transform: translateY(-1px);
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            }

            html,
            body,
            #map {
                height: 100%;
            }

            .panel {
                background-color: rgba(120, 124, 148, 0.8);
                color: #ffffff;
                border: none;
                z-index: 1;
                position: absolute;
                backdrop-filter: blur(2px);
            }

            .submit {
                bottom: 10px;
                left: 10px;
                border-radius: 50px;
                width: 50px;
                height: 50px;
                display: flex;
                justify-content: center;
                align-items: center;
            }

            button.panel {
                cursor: pointer;
            }

            button.panel:hover {
                opacity: 0.7;
            }

            .list {
                position: absolute;
                top: 70px;
                right: 10px;
                border-radius: 30px;
                /* padding: 0 0 0 12px; */
            }

            .list ul::-webkit-scrollbar-thumb {
                background-color: #d9d9d9;
                border: 4px solid transparent;
                border-radius: 8px;
                background-clip: padding-box;
            }

            .list ul::-webkit-scrollbar {
                width: 16px;
            }

            .list ul {
                height: 500px;

                display: flex;
                flex-direction: column;
                gap: 5px;
                list-style: none;
                padding: 10px 0 10px 0;
                margin: 0;
                overflow-y: scroll;
            }

            .list.open {
                width: 340px;
            }

            .list.open .desc {
                display: block;
            }

            .list .item {
                background-color: #d9d9d9;
                border-radius: 30px;
                padding: 12px 16px;
                list-style-type: none;
                display: flex;
                gap: 10px;
            }

            .list .desc {
                display: none;
            }

            .list button {
                position: absolute;
                left: -20px;
                top: -20px;
                border-radius: 100px;
                width: 30px;
                height: 30px;
                text-align: center;
                vertical-align: middle;
                font-size: 32px;
                display: flex;
                align-items: center;
                justify-content: center;
                transform: rotate(180deg) translateY(-2px);
            }

            .list ul img::before {
                outline: none;
                border: none;
                content: "";
            }

            .search {
                position: absolute;
                top: 10px;
                right: 10px;
                font-size: 24px;
                border-radius: 100px;
                padding: 5px 15px;
                outline: none;
            }

            [hidden] {
                display: none !important;
            }
        </style>
    </head>
    <body>
        <header class="title-area panel">
            <h1>Waste Atlas</h1>
            <button class="panel" data-open=".title-area"> </button>
            <section>
                <p>
                    As designers, wouldn't it be amazing to visualize what
                    unexplored, readily accessible, cheap, local materials there
                    are to work with? Through this open-source database we're
                    trying to highlight the potential of local waste as new
                    material. We want to map the waste and classify it so that
                    it finds a home; so that we start blurring the lines of what
                    waste truly is.
                </p>
            </section>
        </header>

        <button class="panel submit" id="submit-button" data-open="#submit-dialog">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="26"
                height="26"
                fill="currentColor"
                class="bi bi-plus"
                viewBox="0 0 16 16"
            >
                <path
                    d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"
                ></path>
            </svg>
        </button>

        <dialog id="submit-dialog" closedby="any" class="panel">
            <h2>Contribute to Waste Atlas</h2>
            <p>
                Help us expand our database by submitting information about
                waste sources in your area. Your contribution will help
                designers discover new potential materials.
            </p>
            <div class="dialog-buttons">
                <button id="close-dialog">Cancel</button>
                <a
                    href="https://docs.google.com/forms/d/e/1FAIpQLSfMDb1cRH8I07CLu9XBmOjz8kIOplMNrOg16Lv1OCvKpK6Ydg/viewform?usp=sharing"
                    target="_blank"
                    autofocus
                    class="form-link">Open Submission Form</a
                >
            </div>
        </dialog>

        <input class="search panel" role="searchbox" placeholder="Search" />

        <section class="list panel">
            <button class="panel" data-open=".list">+</button>
            <div style="overflow: hidden; padding-left: 12px; border-radius: 30px;">
            <ul>
                {
                    waste.map((w) => (
                        <li
                            class="item"
                            data-id={w.id}
                            data-slug={w.slug}
                            data-image={w.image}
                            data-name={w.name}
                            data-loc={w.location}
                            data-char={w.characteristics}
                            data-coords={w.point
                                .map((x) => x.toFixed(3))
                                .join(" ")}
                            data-blob={w.blob
                                .map((x) => x.toFixed(3))
                                .join(" ")}
                            data-cat={w.category}
                        >
                            <div>
                                <img
                                    src={`${import.meta.env.DIRECTUS_URL}/assets/${w.image}?width=200&height=200&fit=cover`}
                                    width="67"
                                    height="67"
                                    style={`background-color: ${w.colour}`}
                                />
                            </div>
                            <div class="desc">
                                <a href={`/waste/${w.slug}`}>
                                    {w.name}
                                    <br />
                                    {w.location}
                                </a>
                            </div>
                        </li>
                    ))
                }
            </ul>
            </div>
        </section>

        <div class="filter panel">
            <small>Choose the type of residue</small>
            <div>
                <button
                    data-category="domestic"
                    style="background-color: #9967CA;">D</button
                >
                <button
                    data-category="construction"
                    style="background-color: #FC4008;">C</button
                >
                <button
                    data-category="agricultural"
                    style="background-color: #979C35;">A</button
                >
                <button
                    data-category="industrial"
                    style="background-color: #A1A1A1;">I</button
                >
            </div>
        </div>

        <!-- <HeatmapControls /> -->
        <div id="map"></div>

        <script>
            let ack = window.localStorage.getItem("ack");
            let ackAt = parseInt(ack || "0") || 0;
            let nowSeconds = Date.now() / 1000;
            let monthSeconds = 60 * 60 * 24 * 30;
            if (ackAt + monthSeconds < nowSeconds) {
                document.querySelector(".title-area")?.classList.add("open");
                window.localStorage.setItem("ack", Date.now().toString());
            }
        </script>

        <script>
            document
                .querySelectorAll<HTMLElement>("[data-open]")
                .forEach((el) => {
                    let targetEl = document.querySelector(el.dataset.open);

                    el.addEventListener("click", (ev) => {
                        if (targetEl?.tagName === "DIALOG") targetEl.show();
                        targetEl.classList.toggle("open");
                    });
                });
        </script>

        <script>
            import maplibre from "maplibre-gl";
            //import maplibre from "mapbox-gl";
            import "maplibre-gl/dist/maplibre-gl.css";
            //import "mapbox-gl/dist/mapbox-gl.css";
            import createFuzzySearch from "@nozbe/microfuzz";

            import {
                randomPoint,
                bbox,
                coordReduce,
                pointsWithinPolygon,
                pointGrid,
                polygonSmooth,
                feature,
                explode,
                sample,
                buffer,
                polygonToLine,
                lineChunk,
                randomPosition,
                point,
                polygon,
                propEach,
            } from "@turf/turf";

            import type {Polygon, Position, Point} from "geojson"

            // Add types for the global window object
            declare global {
                interface Window {
                    mapInstance: maplibre.Map;
                }
            }

            maplibre.accessToken = 'pk.eyJ1Ijoicm9iZXJ0a296aW4iLCJhIjoiY205aXVteWgyMDY0dDJsczZqNGtpbzJqNSJ9.sHenifCidutvMSNZquNWdA'
            const map = new maplibre.Map({
                container: "map",
                //style: "https://api.maptiler.com/maps/dataviz/style.json?key=bLo8xe0MLrejy29a8JsL",
                // style: "https://basemaps.cartocdn.com/gl/dark-matter-gl-style/style.json",
                style: "/map/stylev4.json",
                center: [0, 40],
                zoom: 1.3,
                maxZoom: 9,
                renderWorldCopies: true,
                hash: true,
                //maplibreLogo: false,
                attributionControl: false,
                keyboard: false,
                doubleClickZoom: true,
                dragRotate: false,
                dragPan: true,
                touchZoomRotate: false,
            });
            //map.addControl(new maplibre.AttributionControl(), "bottom-left");

            // Store map instance globally for filter access
            window.mapInstance = map;

            let a = (args) => {
                console.log(args);
                return args;
            };

            function coordsToPositions(coords: number[]): Position[][] {
                const positions: Position[] = [];
                for (let i = 0; i < coords.length; i += 2) {
                    positions.push([coords[i], coords[i + 1]]);
                }
                return [positions];
            }

            function wasteGeoJSON(): GeoJSON.FeatureCollection<GeoJSON.Point> {
                const features = document
                    .querySelectorAll<HTMLElement>(".list .item")
                    .values()
                    .map((waste) => {
                        return {
                            type: "Feature",
                            id: waste.dataset.id || "",
                            geometry: {
                                type: "Point",
                                coordinates: waste.dataset.coords
                                    ?.split(" ")
                                    .map(parseFloat),
                            },
                            properties: {
                                category: waste.dataset.cat,
                            },
                        };
                    });

                return {
                    type: "FeatureCollection",
                    features: features.toArray(),
                };
            }

            function blobGeoJSON(): GeoJSON.FeatureCollection<GeoJSON.Point> {
                // let blob: number[] = [];
                // if (waste.outline) {
                //     let smooth = polygonSmooth(waste.outline, { iterations: 3 });

                //     let blobGeo = pointGrid(bbox(waste.outline), 50, {
                //         mask: smooth.features[0],
                //     });

                //     // buffer the polygon

                //     let exp = explode(
                //         lineChunk(polygonToLine(smooth.features[0]), 50),
                //     );

                //     blobGeo.features.push(
                //         ...sample(exp, Math.floor(exp.features.length / 1.2))
                //             .features,
                //     );
                //     blob = coordReduce(
                //         blobGeo,
                //         (acc: number[], curr: number[]) => acc.concat(curr),
                //         [] as number[],
                //     );
                // }

                // let point = waste.point?.coordinates || [-41, 35];

                function isEmpty(str?: string): str is string {
                    return !str || str.length === 0;
                }

                const features = document
                    .querySelectorAll<HTMLElement>(".list .item")
                    .values()
                    .filter((waste) => !isEmpty(waste.dataset.blob))
                    .flatMap((waste) => {
                        let outlineCoords = waste.dataset.blob
                            .split(" ")
                            .map(parseFloat);
                        let props = {cat: waste.dataset.cat, w: waste.dataset.id}
                        let outline = polygon<typeof props>(coordsToPositions(outlineCoords), props);
                        let smooth = polygonSmooth(outline, {iterations: 3})
                        let smoothBbox = bbox(smooth)

                        let smoothGrid = pointGrid(smoothBbox, 10, {
                            mask: smooth.features[0]
                        })
                        let smoothOutlinePoints = explode(lineChunk(polygonToLine(smooth.features[0]), 10))

                        smoothGrid.features.push(...smoothOutlinePoints.features)

                        smoothGrid.features.forEach(f => {
                            f.properties = props
                        })
                        return smoothGrid.features
                    });
                return {
                    type: "FeatureCollection",
                    features: features.toArray(),
                };
            }

            let $titlearea = document.querySelector(".title-area");
            map.on("move", () => {
                if ($titlearea?.classList.contains("open")) {
                    $titlearea.classList.remove("open");
                }
            });

            map.on("load", () => {
                //map.setProjection({type: "globe"})

                map.addSource("waste", {
                    type: "geojson",
                    data: a(wasteGeoJSON()),
                });

                map.addSource("blobs", {
                    type: "geojson",
                    data: a(blobGeoJSON()),
                });

                // map.loadImage("./recycle.png").then((image) =>
                //     map.addImage("recycle", image.data),
                // );

                let rad: maplibre.DataDrivenPropertyValueSpecification<number> = [
                            "interpolate",
                            ["exponential", 2],
                            ["zoom"],
                            0,
                            6,
                            8.9,
                            190,
                        ];
                    
                let opacity: maplibre.DataDrivenPropertyValueSpecification<number> = [
                            "interpolate",
                            ["linear"],
                            ["zoom"],
                            7,
                            .6,
                            8,
                            0.1,
                        ];
                
                function color(hex: string): maplibre.ExpressionSpecification {
                    return [
                            "interpolate",
                            ["linear"],
                            ["heatmap-density"],
                            0,
                            hexa(hex, 0),
                            0.6,
                            hexa(hex, 0),
                            0.7,
                            hexa(hex, 1),
                            1,
                            hexa(hex, 1),
                        ];
                }

                function hexa(hex: string, alpha: number = 1): string {
                    return hex + (Math.round(alpha * 255).toString(16).padStart(2, '0'))
                }

                // "domestic",
                //             "#9967CA", // Purple
                //             "construction",
                //             "#FC4008", // Red
                //             "commercial",
                //             "#FC4008", // Red
                //             "agricultural",
                //             "#979C35", // Green
                //             "industrial",
                //             "#A1A1A1", // Grey
                //             "#ffffff", // Default color for any other category

                map.addLayer({
                    id: "heatmap_domestic",
                    type: "heatmap",
                    source: "blobs",
                    filter: ["==", ["get", "cat"], "domestic"],
                    paint: {
                        "heatmap-radius": rad,
                        "heatmap-intensity": 1,
                        "heatmap-opacity": opacity,
                        "heatmap-color": color("#9967CA"),
                    },
                }, "place_other");

                map.addLayer({
                    id: "heatmap_construction",
                    type: "heatmap",
                    source: "blobs",
                    filter: ["in", ["get", "cat"], ["literal", ["commercial", "consutrction"]]],
                    paint: {
                        "heatmap-radius": rad,
                        "heatmap-intensity": 1,
                        "heatmap-opacity": opacity,
                        "heatmap-color": color("#FC4008"),
                    },
                }, "place_other");

                map.addLayer({
                    id: "heatmap_agricultural",
                    type: "heatmap",
                    source: "blobs",
                    filter: ["==", ["get", "cat"], "agricultural"],
                    paint: {
                        "heatmap-radius": rad,
                        "heatmap-intensity": 1,
                        "heatmap-opacity": opacity,
                        "heatmap-color": color("#979C35"),
                    },
                }, "place_other");

                map.addLayer({
                    id: "heatmap_industrial",
                    type: "heatmap",
                    source: "blobs",
                    filter: ["==", ["get", "cat"], "industrial"],
                    paint: {
                        "heatmap-radius": rad,
                        "heatmap-intensity": 1,
                        "heatmap-opacity": opacity,
                        "heatmap-color": color("#A1A1A1"),
                    },
                }, "place_other");

                map.addLayer({
                    id: "waste",
                    type: "circle",
                    source: "waste",
                    paint: {
                        "circle-radius": [
                            "interpolate",
                            ["linear"],
                            ["zoom"],
                            0,
                            2,
                            20,
                            15,
                        ],
                        "circle-color": [
                            "match",
                            ["get", "category"],
                            "domestic",
                            "#9967CA", // Purple
                            "construction",
                            "#FC4008", // Red
                            "commercial",
                            "#FC4008", // Red
                            "agricultural",
                            "#979C35", // Green
                            "industrial",
                            "#A1A1A1", // Grey
                            "#ffffff", // Default color for any other category
                        ],
                        "circle-opacity": 1
                        // [
                        //     "interpolate",
                        //     ["linear"],
                        //     ["zoom"],
                        //     7,
                        //     0.1,
                        //     9,
                        //     1,
                        // ],
                        // "circle-stroke-color": [
                        //     "match",
                        //     ["get", "category"],
                        //     "domestic",
                        //     "#9967CA", // Purple
                        //     "construction",
                        //     "#FC4008", // Red
                        //     "commercial",
                        //     "#FC4008", // Red
                        //     "agricultural",
                        //     "#979C35", // Green
                        //     "industrial",
                        //     "#A1A1A1", // Grey
                        //     "#ffffff", // Default color for any other category
                        // ],
                        // "circle-stroke-width": 2,
                        // "circle-stroke-opacity": 1.0,
                    },
                });

                map.on("click", "waste", (e) => {
                    const feature = e.features[0];
                    const props = feature.properties;
                    const coordinates = feature.geometry.coordinates.slice();

                    // Fallback to popup if sidebar functionality isn't loaded yet
                    const description = `<a href="/waste/${props.slug}">${props.name} - ${props.location}</a><br/>
${props.category}<br/>`;

                    // Ensure that if the map is zoomed out such that multiple
                    // copies of the feature are visible, the popup appears
                    // over the copy being pointed to.
                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                        coordinates[0] +=
                            e.lngLat.lng > coordinates[0] ? 360 : -360;
                    }

                    new maplibre.Popup()
                        .setLngLat(coordinates)
                        .setHTML(description)
                        .addTo(map);
                });

                // Change the cursor to a pointer when the mouse is over the places layer.
                map.on("mouseenter", "waste", () => {
                    map.getCanvas().style.cursor = "pointer";
                });

                // Change it back to a pointer when it leaves.
                map.on("mouseleave", "waste", () => {
                    map.getCanvas().style.cursor = "";
                });

                map.on("click", "blobs", (e) => {
                    console.log(e);
                })
            });

            const fuzzySearch = createFuzzySearch(
                document
                    .querySelectorAll<HTMLElement>(".list .item")
                    .values()
                    .toArray(),
                {
                    getText: (e) => [
                        e.dataset.name,
                        e.dataset.loc,
                        e.dataset.char,
                        e.dataset.cat,
                    ],
                },
            );

            // let $titleareabutton = document.querySelector(".title-area button");
            // $titleareabutton?.addEventListener("click", (e) => {
            //     e.target.closest(".title-area").classList.toggle("open");
            // });

            let $list = document.querySelector(".list");
            let $listul = document.querySelector(".list ul");
            let $listbutton = document.querySelector(".list button");
            // $listbutton?.addEventListener("click", (e) => {
            //     e.target.closest(".list").classList.toggle("open");
            // });

            let query = "";

            document
                .querySelector(".search")
                ?.addEventListener("input", (e) => {
                    query = (e.target as HTMLInputElement).value;

                    if (!$list?.classList.contains("open")) {
                        $list?.classList.add("open");
                    }

                    applySearch();
                });

            function applySearch() {
                let results = fuzzySearch(query);

                results = results.filter((result) => result.score <= 3);

                if (selectedCategory) {
                    results = results.filter(
                        (result) =>
                            result.item.dataset.cat === selectedCategory,
                    );
                }

                if (results.length > 0) {
                    console.log(results);

                    results.forEach((result) => {
                        $listul?.appendChild(result.item);
                        result.item.hidden = false;
                    });

                    let children = $listul.children;
                    for (
                        let i = 0, n = children.length - results.length;
                        i < n;
                        i++
                    ) {
                        children[i].hidden = true;
                    }

                    let ids = results.map((r) => parseInt(r.item.dataset.id));
                    console.log("ids", ids);

                    map.setFilter("waste", [
                        "in",
                        ["id"],
                        ["array", "number", ids.length, ["literal", ids]],
                    ]);
                } else {
                    // TODO: SORT
                    $listul?.childNodes.forEach((e) => (e.hidden = false));
                    map.setFilter("waste", null);
                }
            }

            // Filter functionality
            const $filterButtons = document.querySelectorAll(".filter button");
            const activeFilters = new Set(); // Track active category filters

            let selectedCategory = "";

            // Add click event listeners to filter buttons
            $filterButtons.forEach((button) => {
                button.addEventListener("click", () => {
                    const category = button.getAttribute("data-category");
                    if (!category) {
                        return;
                    }

                    // Toggle active state
                    if (button.classList.contains("active")) {
                        button.classList.remove("active");
                        activeFilters.delete(category);
                        selectedCategory = "";
                    } else {
                        button.classList.add("active");
                        activeFilters.add(category);
                        selectedCategory = category;
                    }

                    // Apply filter to map
                    applyFilters();
                });
            });

            // Function to apply filters to the map
            function applyFilters() {
                const map = window.mapInstance; // Access the map instance

                if (!map) return;

                // If no filters are active, show all categories
                if (activeFilters.size === 0) {
                    map.setFilter("waste", null);
                    return;
                }

                // Create a filter expression for the categories
                const filterExpression = [
                    "in",
                    ["get", "category"],
                    ...Array.from(activeFilters),
                ];
                map.setFilter("waste", filterExpression);
            }
        </script>
    </body>
</html>
