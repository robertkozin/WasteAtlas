---

---

<div class="heatmap-controls panel">
    <small>Heatmap Settings</small>
    <div class="controls">
        <div class="control">
            <label for="radius">Radius</label>
            <input
                type="range"
                id="radius"
                name="radius"
                min="1"
                max="190"
                value="20"
            />
            <span id="radius-value">20</span>
        </div>
        <div class="control">
            <label for="intensity">Intensity</label>
            <input
                type="range"
                id="intensity"
                name="intensity"
                min="0.1"
                max="2"
                step="0.1"
                value="1"
            />
            <span id="intensity-value">1</span>
        </div>
        <div class="control">
            <label for="color">Color</label>
            <select id="color-scheme" name="color-scheme">
                <option value="heat">Heat</option>
                <option value="blue">Blue</option>
                <option value="purple">Purple</option>
                <option value="green">Green</option>
            </select>
        </div>
    </div>
</div>

<style>
    .heatmap-controls {
        background: white;
        position: absolute;
        right: 70px;
        bottom: 10px;
        z-index: 5;
        border-radius: 20px;
        padding: 12px;
        min-width: 220px;
    }

    .heatmap-controls small {
        display: block;
        color: black;
        text-transform: uppercase;
        font-size: 13px;
        margin-bottom: 10px;
        font-weight: 500;
    }

    .controls {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .control {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .control label {
        min-width: 70px;
        font-size: 14px;
    }

    .control input[type="range"] {
        flex: 1;
    }

    .control span {
        min-width: 25px;
        text-align: right;
        font-size: 14px;
    }

    .control select {
        flex: 1;
        padding: 2px 5px;
        border-radius: 5px;
        border: 1px solid #747474;
        background-color: white;
    }
</style>

<script>
    // Initialize values display
    const radiusInput = document.getElementById("radius") as HTMLInputElement;
    const intensityInput = document.getElementById(
        "intensity",
    ) as HTMLInputElement;
    const colorSchemeSelect = document.getElementById(
        "color-scheme",
    ) as HTMLSelectElement;

    const radiusValue = document.getElementById("radius-value");
    const intensityValue = document.getElementById("intensity-value");

    // Initialize values display
    radiusValue.textContent = radiusInput.value;
    intensityValue.textContent = intensityInput.value;

    // Define color schemes
    const colorSchemes = {
        heat: [
            "interpolate",
            ["linear"],
            ["heatmap-density"],
            0,
            "rgba(33,102,172,0)",
            0.2,
            "rgb(103,169,207)",
            0.4,
            "rgb(209,229,240)",
            0.6,
            "rgb(253,219,199)",
            0.8,
            "rgb(239,138,98)",
            1,
            "rgb(178,24,43)",
        ],
        blue: [
            "interpolate",
            ["linear"],
            ["heatmap-density"],
            0,
            "rgba(0,0,255,0)",
            0.2,
            "rgba(0,0,255,0.2)",
            0.4,
            "rgba(0,0,255,0.4)",
            0.6,
            "rgba(0,0,255,0.6)",
            0.8,
            "rgba(0,0,255,0.8)",
            1,
            "rgba(0,0,255,1)",
        ],
        purple: [
            "interpolate",
            ["linear"],
            ["heatmap-density"],
            0,
            "rgba(128,0,128,0)",
            0.2,
            "rgba(128,0,128,0.2)",
            0.4,
            "rgba(128,0,128,0.4)",
            0.6,
            "rgba(128,0,128,0.6)",
            0.8,
            "rgba(128,0,128,0.8)",
            1,
            "rgba(128,0,128,1)",
        ],
        green: [
            "interpolate",
            ["linear"],
            ["heatmap-density"],
            0,
            "rgba(0,128,0,0)",
            0.2,
            "rgba(0,128,0,0.2)",
            0.4,
            "rgba(0,128,0,0.4)",
            0.6,
            "rgba(0,128,0,0.6)",
            0.8,
            "rgba(0,128,0,0.8)",
            1,
            "rgba(0,128,0,1)",
        ],
    };

    // Wait for map to be loaded
    window.addEventListener("DOMContentLoaded", () => {
        // Check for map loaded every 100ms until it's available
        const checkMapInterval = setInterval(() => {
            if (window.mapInstance) {
                clearInterval(checkMapInterval);
                initHeatmapControls();
            }
        }, 100);
    });

    function initHeatmapControls() {
        const map = window.mapInstance;

        // Wait for map style to be loaded
        map.on("styledata", () => {
            // Apply initial settings
            // updateHeatmap();

            // Add event listeners for controls
            radiusInput.addEventListener("input", (e) => {
                radiusValue.textContent = radiusInput.value;
                updateHeatmap();
            });

            intensityInput.addEventListener("input", (e) => {
                intensityValue.textContent = intensityInput.value;
                updateHeatmap();
            });

            colorSchemeSelect.addEventListener("change", () => {
                updateHeatmap();
            });

            // map.on("moveend", () => {
            //     const zoom = map.getZoom();
            //     const radiusExp = map.getPaintProperty(
            //         "blobs-heat",
            //         "heatmap-radius",
            //     );

            //     try {
            //         // This will evaluate the interpolate expression at the current zoom level
            //         const radius = map.expression
            //             .parse(radiusExp)
            //             .evaluate({ zoom: zoom });
            //         console.log(
            //             `At zoom ${zoom.toFixed(2)}, heatmap-radius = ${radius.toFixed(2)}px`,
            //         );
            //     } catch (e) {
            //         console.error("Error evaluating radius:", e);
            //     }
            // });
        });
    }

    function updateHeatmap() {
        const map = window.mapInstance;

        // Only proceed if the map and layer exist
        if (!map || !map.getLayer("blobs-heat")) return;

        const radius = parseInt(radiusInput.value);
        const intensity = parseFloat(intensityInput.value);
        const colorScheme = colorSchemeSelect.value;

        // Update heatmap properties
        map.setPaintProperty("blobs-heat", "heatmap-radius", radius);
        map.setPaintProperty("blobs-heat", "heatmap-intensity", intensity);
        map.setPaintProperty(
            "blobs-heat",
            "heatmap-color",
            colorSchemes[colorScheme],
        );
        map.setPaintProperty("blobs-heat", "heatmap-opacity", 0.8);
    }
</script>
